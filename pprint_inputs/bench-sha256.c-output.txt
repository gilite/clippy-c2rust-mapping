pub type size_t = libc :: c_ulong ;
pub type __off_t = libc :: c_long ;
pub type __off64_t = libc :: c_long ;
pub type __time_t = libc :: c_long ;
pub type __suseconds_t = libc :: c_long ;
pub type __syscall_slong_t = libc :: c_long ;
# [derive ( Copy , Clone )] # [repr ( C )] pub struct _IO_FILE { pub _flags : libc :: c_int , pub _IO_read_ptr : * mut libc :: c_char , pub _IO_read_end : * mut libc :: c_char , pub _IO_read_base : * mut libc :: c_char , pub _IO_write_base : * mut libc :: c_char , pub _IO_write_ptr : * mut libc :: c_char , pub _IO_write_end : * mut libc :: c_char , pub _IO_buf_base : * mut libc :: c_char , pub _IO_buf_end : * mut libc :: c_char , pub _IO_save_base : * mut libc :: c_char , pub _IO_backup_base : * mut libc :: c_char , pub _IO_save_end : * mut libc :: c_char , pub _markers : * mut _IO_marker , pub _chain : * mut _IO_FILE , pub _fileno : libc :: c_int , pub _flags2 : libc :: c_int , pub _old_offset : __off_t , pub _cur_column : libc :: c_ushort , pub _vtable_offset : libc :: c_schar , pub _shortbuf : [libc :: c_char ; 1] , pub _lock : * mut libc :: c_void , pub _offset : __off64_t , pub _codecvt : * mut _IO_codecvt , pub _wide_data : * mut _IO_wide_data , pub _freeres_list : * mut _IO_FILE , pub _freeres_buf : * mut libc :: c_void , pub __pad5 : size_t , pub _mode : libc :: c_int , pub _unused2 : [libc :: c_char ; 20] }
pub type _IO_lock_t = () ;
pub type FILE = _IO_FILE ;
# [derive ( Copy , Clone )] # [repr ( C )] pub struct timeval { pub tv_sec : __time_t , pub tv_usec : __suseconds_t }
pub type __rusage_who = libc :: c_int ;
pub const RUSAGE_THREAD : __rusage_who = 1 ;
pub const RUSAGE_CHILDREN : __rusage_who = - 1 ;
pub const RUSAGE_SELF : __rusage_who = 0 ;
# [derive ( Copy , Clone )] # [repr ( C )] pub struct rusage { pub ru_utime : timeval , pub ru_stime : timeval , pub c2rust_unnamed : C2RustUnnamed_12 , pub c2rust_unnamed_0 : C2RustUnnamed_11 , pub c2rust_unnamed_1 : C2RustUnnamed_10 , pub c2rust_unnamed_2 : C2RustUnnamed_9 , pub c2rust_unnamed_3 : C2RustUnnamed_8 , pub c2rust_unnamed_4 : C2RustUnnamed_7 , pub c2rust_unnamed_5 : C2RustUnnamed_6 , pub c2rust_unnamed_6 : C2RustUnnamed_5 , pub c2rust_unnamed_7 : C2RustUnnamed_4 , pub c2rust_unnamed_8 : C2RustUnnamed_3 , pub c2rust_unnamed_9 : C2RustUnnamed_2 , pub c2rust_unnamed_10 : C2RustUnnamed_1 , pub c2rust_unnamed_11 : C2RustUnnamed_0 , pub c2rust_unnamed_12 : C2RustUnnamed }
# [derive ( Copy , Clone )] # [repr ( C )] pub union C2RustUnnamed { pub ru_nivcsw : libc :: c_long , pub __ru_nivcsw_word : __syscall_slong_t }
# [derive ( Copy , Clone )] # [repr ( C )] pub union C2RustUnnamed_0 { pub ru_nvcsw : libc :: c_long , pub __ru_nvcsw_word : __syscall_slong_t }
# [derive ( Copy , Clone )] # [repr ( C )] pub union C2RustUnnamed_1 { pub ru_nsignals : libc :: c_long , pub __ru_nsignals_word : __syscall_slong_t }
# [derive ( Copy , Clone )] # [repr ( C )] pub union C2RustUnnamed_2 { pub ru_msgrcv : libc :: c_long , pub __ru_msgrcv_word : __syscall_slong_t }
# [derive ( Copy , Clone )] # [repr ( C )] pub union C2RustUnnamed_3 { pub ru_msgsnd : libc :: c_long , pub __ru_msgsnd_word : __syscall_slong_t }
# [derive ( Copy , Clone )] # [repr ( C )] pub union C2RustUnnamed_4 { pub ru_oublock : libc :: c_long , pub __ru_oublock_word : __syscall_slong_t }
# [derive ( Copy , Clone )] # [repr ( C )] pub union C2RustUnnamed_5 { pub ru_inblock : libc :: c_long , pub __ru_inblock_word : __syscall_slong_t }
# [derive ( Copy , Clone )] # [repr ( C )] pub union C2RustUnnamed_6 { pub ru_nswap : libc :: c_long , pub __ru_nswap_word : __syscall_slong_t }
# [derive ( Copy , Clone )] # [repr ( C )] pub union C2RustUnnamed_7 { pub ru_majflt : libc :: c_long , pub __ru_majflt_word : __syscall_slong_t }
# [derive ( Copy , Clone )] # [repr ( C )] pub union C2RustUnnamed_8 { pub ru_minflt : libc :: c_long , pub __ru_minflt_word : __syscall_slong_t }
# [derive ( Copy , Clone )] # [repr ( C )] pub union C2RustUnnamed_9 { pub ru_isrss : libc :: c_long , pub __ru_isrss_word : __syscall_slong_t }
# [derive ( Copy , Clone )] # [repr ( C )] pub union C2RustUnnamed_10 { pub ru_idrss : libc :: c_long , pub __ru_idrss_word : __syscall_slong_t }
# [derive ( Copy , Clone )] # [repr ( C )] pub union C2RustUnnamed_11 { pub ru_ixrss : libc :: c_long , pub __ru_ixrss_word : __syscall_slong_t }
# [derive ( Copy , Clone )] # [repr ( C )] pub union C2RustUnnamed_12 { pub ru_maxrss : libc :: c_long , pub __ru_maxrss_word : __syscall_slong_t }
pub type __rusage_who_t = __rusage_who ;
# [derive ( Copy , Clone )] # [repr ( C )] pub struct timings_state { pub real_start : timeval , pub user_start : timeval , pub sys_start : timeval , pub real_usec : libc :: c_long , pub user_usec : libc :: c_long , pub sys_usec : libc :: c_long }
# [inline] unsafe extern "C" fn sha256_buffer (mut buf : * const libc :: c_char , mut len : size_t , mut res : * mut libc :: c_void) -> * mut libc :: c_void { return SHA256 (buf as * const libc :: c_uchar , len , res as * mut libc :: c_uchar) as * mut libc :: c_void ; }
# [inline] unsafe extern "C" fn atoi (mut __nptr : * const libc :: c_char) -> libc :: c_int { return strtol (__nptr , 0 as * mut libc :: c_void as * mut * mut libc :: c_char , 10 as libc :: c_int) as libc :: c_int ; }
# [inline] unsafe extern "C" fn atol (mut __nptr : * const libc :: c_char) -> libc :: c_long { return strtol (__nptr , 0 as * mut libc :: c_void as * mut * mut libc :: c_char , 10 as libc :: c_int) ; }
unsafe fn main_0 (mut argc : libc :: c_int , mut argv : * mut * mut libc :: c_char) -> libc :: c_int { if argc != 3 as libc :: c_int { fprintf (stderr , b"Usage: %s SIZE REPETITIONS\n\0" as * const u8 as * const libc :: c_char , * argv . offset (0 as libc :: c_int as isize)) ; exit (1 as libc :: c_int) ; } let mut size : size_t = atol (* argv . offset (1 as libc :: c_int as isize)) as size_t ; let mut repeat : libc :: c_int = atoi (* argv . offset (2 as libc :: c_int as isize)) ; let mut memblock : * mut libc :: c_char = malloc (size) as * mut libc :: c_char ; if memblock . is_null () { fprintf (stderr , b"%s: memory exhausted\n\0" as * const u8 as * const libc :: c_char , * argv . offset (0 as libc :: c_int as isize)) ; return 1 as libc :: c_int } let mut i : size_t = 0 ; i = 0 as libc :: c_int as size_t ; while i < size { * memblock . offset (i as isize) = (i . wrapping_mul (i . wrapping_sub (1 as libc :: c_int as libc :: c_ulong)) . wrapping_mul (i . wrapping_sub (5 as libc :: c_int as libc :: c_ulong)) >> 6 as libc :: c_int) . wrapping_add (i . wrapping_rem (499 as libc :: c_int as libc :: c_ulong)) . wrapping_add (i . wrapping_rem (101 as libc :: c_int as libc :: c_ulong)) as libc :: c_uchar as libc :: c_char ; i = i . wrapping_add (1) ; } let mut ts : timings_state = timings_state { real_start : timeval { tv_sec : 0 , tv_usec : 0 } , user_start : timeval { tv_sec : 0 , tv_usec : 0 } , sys_start : timeval { tv_sec : 0 , tv_usec : 0 } , real_usec : 0 , user_usec : 0 , sys_usec : 0 } ; timing_start (& mut ts) ; let mut count : libc :: c_int = 0 ; count = 0 as libc :: c_int ; while count < repeat { let mut digest : [libc :: c_char ; 64] = [0 ; 64] ; sha256_buffer (memblock , size , digest . as_mut_ptr () as * mut libc :: c_void) ; count += 1 ; } timing_end (& mut ts) ; timing_output (& mut ts) ; return 0 as libc :: c_int ; }
unsafe extern "C" fn timing_output (mut ts : * const timings_state) { printf (b"real %10.6f\n\0" as * const u8 as * const libc :: c_char , (* ts) . real_usec as libc :: c_double / 1000000.0f64) ; printf (b"user %7.3f\n\0" as * const u8 as * const libc :: c_char , (* ts) . user_usec as libc :: c_double / 1000000.0f64) ; printf (b"sys  %7.3f\n\0" as * const u8 as * const libc :: c_char , (* ts) . sys_usec as libc :: c_double / 1000000.0f64) ; }
unsafe extern "C" fn timing_end (mut ts : * mut timings_state) { let mut real_end : timeval = timeval { tv_sec : 0 , tv_usec : 0 } ; let mut usage : rusage = rusage { ru_utime : timeval { tv_sec : 0 , tv_usec : 0 } , ru_stime : timeval { tv_sec : 0 , tv_usec : 0 } , c2rust_unnamed : C2RustUnnamed_12 { ru_maxrss : 0 } , c2rust_unnamed_0 : C2RustUnnamed_11 { ru_ixrss : 0 } , c2rust_unnamed_1 : C2RustUnnamed_10 { ru_idrss : 0 } , c2rust_unnamed_2 : C2RustUnnamed_9 { ru_isrss : 0 } , c2rust_unnamed_3 : C2RustUnnamed_8 { ru_minflt : 0 } , c2rust_unnamed_4 : C2RustUnnamed_7 { ru_majflt : 0 } , c2rust_unnamed_5 : C2RustUnnamed_6 { ru_nswap : 0 } , c2rust_unnamed_6 : C2RustUnnamed_5 { ru_inblock : 0 } , c2rust_unnamed_7 : C2RustUnnamed_4 { ru_oublock : 0 } , c2rust_unnamed_8 : C2RustUnnamed_3 { ru_msgsnd : 0 } , c2rust_unnamed_9 : C2RustUnnamed_2 { ru_msgrcv : 0 } , c2rust_unnamed_10 : C2RustUnnamed_1 { ru_nsignals : 0 } , c2rust_unnamed_11 : C2RustUnnamed_0 { ru_nvcsw : 0 } , c2rust_unnamed_12 : C2RustUnnamed { ru_nivcsw : 0 } } ; gettimeofday (& mut real_end , 0 as * mut libc :: c_void) ; getrusage (RUSAGE_SELF , & mut usage) ; (* ts) . real_usec = (real_end . tv_sec - (* ts) . real_start . tv_sec) * 1000000 as libc :: c_int as libc :: c_long + real_end . tv_usec - (* ts) . real_start . tv_usec ; (* ts) . user_usec = (usage . ru_utime . tv_sec - (* ts) . user_start . tv_sec) * 1000000 as libc :: c_int as libc :: c_long + usage . ru_utime . tv_usec - (* ts) . user_start . tv_usec ; (* ts) . sys_usec = (usage . ru_stime . tv_sec - (* ts) . sys_start . tv_sec) * 1000000 as libc :: c_int as libc :: c_long + usage . ru_stime . tv_usec - (* ts) . sys_start . tv_usec ; }
unsafe extern "C" fn timing_start (mut ts : * mut timings_state) { let mut usage : rusage = rusage { ru_utime : timeval { tv_sec : 0 , tv_usec : 0 } , ru_stime : timeval { tv_sec : 0 , tv_usec : 0 } , c2rust_unnamed : C2RustUnnamed_12 { ru_maxrss : 0 } , c2rust_unnamed_0 : C2RustUnnamed_11 { ru_ixrss : 0 } , c2rust_unnamed_1 : C2RustUnnamed_10 { ru_idrss : 0 } , c2rust_unnamed_2 : C2RustUnnamed_9 { ru_isrss : 0 } , c2rust_unnamed_3 : C2RustUnnamed_8 { ru_minflt : 0 } , c2rust_unnamed_4 : C2RustUnnamed_7 { ru_majflt : 0 } , c2rust_unnamed_5 : C2RustUnnamed_6 { ru_nswap : 0 } , c2rust_unnamed_6 : C2RustUnnamed_5 { ru_inblock : 0 } , c2rust_unnamed_7 : C2RustUnnamed_4 { ru_oublock : 0 } , c2rust_unnamed_8 : C2RustUnnamed_3 { ru_msgsnd : 0 } , c2rust_unnamed_9 : C2RustUnnamed_2 { ru_msgrcv : 0 } , c2rust_unnamed_10 : C2RustUnnamed_1 { ru_nsignals : 0 } , c2rust_unnamed_11 : C2RustUnnamed_0 { ru_nvcsw : 0 } , c2rust_unnamed_12 : C2RustUnnamed { ru_nivcsw : 0 } } ; getrusage (RUSAGE_SELF , & mut usage) ; (* ts) . user_start = usage . ru_utime ; (* ts) . sys_start = usage . ru_stime ; gettimeofday (& mut (* ts) . real_start , 0 as * mut libc :: c_void) ; }
pub fn main () { let mut args : Vec :: < * mut libc :: c_char > :: = Vec :: new () ; for arg in :: std :: env :: args () { args . push ((:: std :: ffi :: CString :: new (arg)) . expect ("Failed to convert argument into CString.") . into_raw ()) ; } ; args . push (:: core :: ptr :: null_mut ()) ; unsafe { :: std :: process :: exit (main_0 ((args . len () - 1) as libc :: c_int , args . as_mut_ptr () as * mut * mut libc :: c_char) as i32) } }